# interpreter for shell commands (needs to be POSIX compatible)
set shell sh
set icons
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set preview true
set previewer pistol

# use enter for shell commands
map <enter> shell

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
  case $(file --mime-type $f -b) in
	image/vnd.djvu|application/pdf|application/octet-stream) i3-swallow zathura $fx >/dev/null 2>&1 ;;
    text/*) $EDITOR $fx;;
	image/x-xcf|image/svg+xml) setsid -f gimp $f >/dev/null 2>&1 ;;
	image/*) i3-swallow sxiv $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\)\(_large\)*$" | setsid -f sxiv -aio 2>/dev/null | lf-select ;;
	audio/*) i3-swallow mpv --audio-display=no $f ;;
	video/*) setsid -f i3-swallow mpv $f -quiet >/dev/null 2>&1 ;;
	application/pdf|application/vnd*|application/epub*) i3-swallow zathura $fx >/dev/null 2>&1 ;;
        *) for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done;;
    esac
}}

cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}

cmd dragon %dragon-drag-and-drop -a -x $fx
cmd dlfile %dragon-drag-and-drop --target

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; mv $fx ~/.trash

# define a custom 'delete' command
cmd delete ${{
    set -f
    printf "$fx\n"
    printf "delete?[y/n]"
    read ans
    [ $ans = "y" ] && rm -rf $fx
}}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
# map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# Open in terminal in current window
cmd currentWindow ${{
		cd $f"/"
}}

cmd bulkrename ${{
    old=$(mktemp)
    new=$(mktemp)
    [ -n $fs ] && fs=$(ls)
    printf "$fs\n" > $old
    printf "$fs\n" > $new
    $EDITOR $new
    [ $(cat $new | wc -l) -ne $(cat $old | wc -l) ] && exit
    paste $old $new | while read names; do
        src=$(printf $names | cut -f1)
        dst=$(printf $names | cut -f2)
        [ $src = $dst ] && continue
        [ -e $dst ] && continue
        mv $src $dst
    done
    rm $old $new
    lf -remote "send $id unselect"
}}

# Remove defaults
map d

# Basic functionalities
map DD delete
map dd cut

# Movement
# Nas
map gnt cd /mnt/stultnas/Tobin
map gna cd /mnt/stultnas/Tobin/Anime
map gns cd /mnt/stultnas/Tobin/Series
map gnc cd /mnt/stultnas/Tobin/Converted

# Projects
map gs cd ~/Projects/Shell
map gpp cd ~/Projects/Personal\ Projects
map gps cd ~/Projects/School
map gpo cd ~/Projects/Open Source

# Documents
map gd cd ~/Documents
map gb cd ~/Documents/Books

# Dragon mapping
map dr dragon
map dl dlfile
